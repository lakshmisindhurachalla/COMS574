import itertools
import time
import numpy as np
import pandas as pd
import seaborn as sns
import statsmodels.api as sm
import matplotlib.pyplot as plt
from sklearn import linear_model
from sklearn.metrics import mean_squared_error
from tqdm import tnrange, tqdm_notebook
from sklearn.model_selection import train_test_split
from itertools import combinations
from sklearn.linear_model import LinearRegression
from sklearn import metrics
from sklearn.metrics import r2_score

def MSE5():
    for i in range (5, 6):
        for data in combinations (['AGE', 'INDUS', 'NOX', 'RM', 'TAX'], i):
            X = housing_data[list(data)]
            result = getMSE(X)
            return result['MSE']

def getCP(MSE, i):
    n = 506
    return MSE + ((2 * MSE5()*i)/n)

def getMSE(X):
    y = housing_data['MEDV']
    lm = LinearRegression()
    lm.fit(X, y)
    prediction = lm.predict(X)
    df1 = pd.DataFrame({'Actual': y, 'Predicted': prediction})
    df2 = df1.head(10)
    
    return {'MSE' : metrics.mean_squared_error(y, prediction), 'score': r2_score(y, prediction)}

housing_data = pd.read_csv('/Users/vyeleswara002/Downloads/housingdata.csv')
housing_data.head()
housing_data.describe()

score = []
MSE = []
input = []
cp = []
for i in range (1, 6):
    for data in combinations (['AGE', 'INDUS', 'NOX', 'RM', 'TAX'], i):
        X = housing_data[list(data)]
        result = getMSE(X)
        score.append(result['score'])
        MSE.append(result['MSE'])
        input.append(list(data))
        cp.append(getCP(result['MSE'], i))
    
df1 = pd.DataFrame({'input': input, 'score': score, 'MSE': MSE, 'cp': cp})
display(df1[df1.cp == df1.cp.min()])
# print("\nREFERENCE\n")
print(df1)

# Smallest Cp for each value of i

# [RM]	0.483525	43.600552	43.743984
# [RM, TAX]	0.560564	37.096997	37.383861
# [AGE, RM, TAX]	0.570008	36.29972	36.730015
# [AGE, INDUS, RM, TAX]	0.570102	36.291805	36.865532
# [AGE, INDUS, NOX, RM, TAX]	0.570144	36.288264	37.005423

#CP
plt.plot([1,2,3,4,5],[43.743984,37.383861,36.730015, 36.865532, 37.005423 ])
#Validation Set.
plt.plot([1,2,3,4,5],[43.600552,37.096997,36.29972, 36.291805, 36.288264 ])
plt.title("Best Fitting Linear model based on CP vs Validation Set.")
