import itertools
import time
import numpy as np
import pandas as pd
import seaborn as sns
import statsmodels.api as sm
import matplotlib.pyplot as plt
from sklearn import linear_model
from sklearn.metrics import mean_squared_error
from tqdm import tnrange, tqdm_notebook
from sklearn.model_selection import train_test_split
from itertools import combinations
from sklearn.linear_model import LinearRegression
from sklearn import metrics
from sklearn.metrics import r2_score

def getMSE(X):
    y = housing_data['MEDV']
    x_train, x_test, y_train, y_test = train_test_split (X, y, train_size = 0.79, test_size = 0.21, random_state = 10)
    lm = LinearRegression()
    lm.fit(x_train, y_train)
    prediction = lm.predict(x_test)
    df1 = pd.DataFrame({'Actual': y_test, 'Predicted': prediction})
    df2 = df1.head(10)
    return {'MSE' : metrics.mean_squared_error(y_test, prediction), 'score': r2_score(y_test, prediction), 'y_test': y_test, 'prediction': prediction}

def getTotalLoss(X):
    y = housing_data['MEDV']
    x_train, x_test, y_train, y_test = train_test_split (X, y, train_size = 0.79, test_size = 0.21, random_state = 10)
    lm = LinearRegression()
    lm.fit(x_train, y_train)
    prediction = lm.predict(x_train)
    df1 = pd.DataFrame({'Actual': y_train, 'Predicted': prediction})
    df2 = df1.head(10)
    return {'MSE' : metrics.mean_squared_error(y_train, prediction), 'score': r2_score(y_train, prediction)}

def checkNested(y_test, prediction):
    plt.scatter(y_test, prediction)
    plt.xlabel('y_test')
    plt.ylabel('prediction')


housing_data = pd.read_csv('/Users/vyeleswara002/Downloads/housingdata.csv')
housing_data.head()
housing_data.describe()

score = []
MSE = []
input = []
y_test = []
prediction = []
#Change range for each subset of i.
# 3	[RM]	0.520073	48.694891
# 14	[RM, TAX]	0.559364	44.708372
# 20	[AGE, RM, TAX]	0.558088	44.837762
# 28	[AGE, NOX, RM, TAX]	0.557428	44.904737
# 30	[AGE, INDUS, NOX, RM, TAX]	0.556346	45.014531

for i in range (1, 6):
    for data in combinations (['AGE', 'INDUS', 'NOX', 'RM', 'TAX'], i):
        X = housing_data[list(data)]
        result = getMSE(X)
        score.append(result['score'])
        MSE.append(result['MSE'])
        input.append(list(data))
        y_test.append(result['y_test'])
        prediction.append(result['prediction'])
    
df1 = pd.DataFrame({'input': input, 'score': score, 'MSE': MSE, 'y_test': y_test, 'prediction': prediction})
display(df1[df1.MSE == df1.MSE.min()])
# print("\nREFERENCE\n")
# print(df1)

# --------------------->  Part i. <---------------------
# print(df1.loc[3].input)
# checkNested(df1.loc[3].y_test, df1.loc[3].prediction)

# print(df1.loc[14].input)
# checkNested(df1.loc[14].y_test, df1.loc[14].prediction)


# print(df1.loc[20].input)
# checkNested(df1.loc[20].y_test, df1.loc[20].prediction)


# print(df1.loc[28].input)
# checkNested(df1.loc[28].y_test, df1.loc[28].prediction)

# print(df1.loc[30].input)
# checkNested(df1.loc[30].y_test, df1.loc[30].prediction)


# --------------------->  Part ii. <---------------------
# plt.plot([1,2,3,4,5], [df1.loc[3].MSE, df1.loc[14].MSE, df1.loc[20].MSE, df1.loc[28].MSE, df1.loc[30].MSE])
# plt.title('Validation loss - best subsets')


# plt.plot([1,2,3,4,5], [getTotalLoss(housing_data[list(df1.loc[3].input)])['MSE'],
#                        getTotalLoss(housing_data[list(df1.loc[14].input)])['MSE'],
#                        getTotalLoss(housing_data[list(df1.loc[20].input)])['MSE'],
#                        getTotalLoss(housing_data[list(df1.loc[28].input)])['MSE'],
#                        getTotalLoss(housing_data[list(df1.loc[30].input)])['MSE']
#                       ])


# --------------------->  Part iii <---------------------
