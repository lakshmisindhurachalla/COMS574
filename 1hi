import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import PolynomialFeatures
from sklearn import metrics
from array import array
from numpy import polyfit

def getGroundTruth(dataSamples):
    y = []
    for x in dataSamples['x']:
       y.append(getMSE(dataSamples, 3))
    return y

def getGroundTruth_poly(dataSamples):
    y = []
    for x in dataSamples['x']:
       y.append(getMSE_poly(dataSamples, 3, getPolynomials(dataSamples, 3)))
    return y

def groundTruth(x):
    coef_ = getGroundTruthCoef()
    return coef_[0]*x**0 + coef_[1]*x**1 + coef_[2]*x**2 + coef_[3]*x**3

def getGroundTruthCoef():
    X=np.array([[0,10],[5,5],[8,12],[12,0]])
    x=np.array(X[:,0]).reshape(-1,1)
    y=np.array(X[:,1])
    poly_reg = PolynomialFeatures(degree=3)
    X_poly = poly_reg.fit_transform(x)
    lin_reg = LinearRegression(fit_intercept=False)
    lin_reg.fit(X_poly, y)
    return lin_reg.coef_
    
    
def getDataSamples(n):
    X = np.random.uniform(0,15,n)
    Y = groundTruth(X) + np.random.default_rng().normal(0, 10)
    return { 'x': X, 'y': Y}

def getPolynomials(dataSamples, i, number_of_samples):
    return polyfit(dataSamples['x'][0:(50*number_of_samples)], dataSamples['y'][0:(50*number_of_samples)], i)


def getMSE(dataSamples, order):
    x_train, x_test, y_train, y_test = train_test_split(dataSamples['x'], dataSamples['y'], train_size = 0.83, test_size = 0.17, random_state = 10)
    reg = np.poly1d(polyfit(x_train, y_train, order))
    prediction = reg(x_test)
    return metrics.mean_squared_error(y_test, prediction)

def getMSE_poly(dataSamples, order, polyfit_coeff):
    x_train, x_test, y_train, y_test = train_test_split(dataSamples['x'], dataSamples['y'], train_size = 0.80, test_size = 0.20, random_state = 10)
    reg = np.poly1d(polyfit_coeff)
    prediction = reg(x_test)
    return metrics.mean_squared_error(y_test, prediction)

dataSamples = getDataSamples(30)
dataSamples_5000 = getDataSamples(5000)

# MSERange = []
# for i in range (1,30):
#     MSERange.append(getMSE_poly(dataSamples_5000, i, getPolynomials(dataSamples_5000, i)))

polynomials = []
a0 = []
a2 = []
a4 = []
a6 = []
a8 = []
for p in range (1, 101):
    result = getPolynomials(dataSamples_5000, 30, p)
    polynomials.append(result)
    a0.append(result[0])
    a2.append(result[2])
    a4.append(result[4])
    a6.append(result[6])
    a8.append(result[8])

plt.title("Ground-Truth Testing Loss n=1000")
plt.plot( a0, '-r', label='a0' )
# plt.plot(dataSamples_1000['x'], getGroundTruth_poly(dataSamples_1000) , '-g', label='Ground Truth' )
plt.axhline(y = getGroundTruthCoef()[0] , color='g', label='Ground Truth a0')
plt.ylabel('a0')
plt.xlabel('Value of i, where samples taken = 50i')
plt.legend()
